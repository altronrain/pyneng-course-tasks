# -*- coding: utf-8 -*-
"""
Задание 5.4b

Всё, как в задании 5.4a, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.4a.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0 255.255.255.0
* 190.1.0.0 255.255.0.0

Пример адреса хоста:
* 10.0.1.1 255.255.255.0 - хост из сети 10.0.1.0 255.255.255.0
* 10.0.5.195 255.255.255.240 - хост из сети 10.0.5.192 255.255.255.240

Если пользователь ввел адрес 10.0.1.1 255.255.255.0, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195 255.255.255.240, 10.0.1.1 255.255.255.0

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000
"""

ip_and_mask = input("Введите IPv4-адрес и маску подсети: ")
ip = ip_and_mask.split(' ')[0].split(".")
mask = ip_and_mask.split(' ')[1].split(".")

#ip = ['10', '1', '1', '195']
ip_bin_str = (format(int(ip[0]), '08b') + 
              format(int(ip[1]), '08b') + 
              format(int(ip[2]), '08b') + 
              format(int(ip[3]), '08b'))
#mask = ['255', '255', '255', '240']
mask_bin_str = (format(int(mask[0]), '08b') + 
                format(int(mask[1]), '08b') + 
                format(int(mask[2]), '08b') + 
                format(int(mask[3]), '08b'))

mask_count = mask_bin_str.count("1")

revert_mask = 32 - mask_count
net_bin_str = ip_bin_str[:-(revert_mask)] + "0"*revert_mask
net = [int(net_bin_str[:8], 2),
       int(net_bin_str[8:16], 2),
       int(net_bin_str[16:24], 2),
       int(net_bin_str[24:32], 2),]


template = """
Network:
{0:<10}{1:<10}{2:<10}{3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}

Mask:
/{8:<}
{4:<10}{5:<10}{6:<10}{7:<10}
{4:08b}  {5:08b}  {6:08b}  {7:08b}
"""
print(template.format(net[0], net[1], net[2], net[3],
                         int(mask[0]), int(mask[1]), int(mask[2]), int(mask[3]),
                         mask_count))