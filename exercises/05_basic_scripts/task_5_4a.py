# -*- coding: utf-8 -*-
"""
Задание 5.4a

Запросить у пользователя ввод IP-сети в формате: 10.1.1.0 255.255.255.0

Затем вывести информацию о сети и маске в таком формате:

Network:
10        1         1         0
00001010  00000001  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях сеть/маска.

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)

Пример работы задания:

$ python task_5_4a.py
Введите адрес сети: 10.1.1.0 255.255.255.0

Network:
10        1         1         0
00001010  00000001  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


$ python task_5_4a.py
Введите адрес сети: 10.1.1.192 255.255.255.240

Network:
10        1         1         192
00001010  00000001  00000001  11000000

Mask:
/28
255       255       255       240
11111111  11111111  11111111  11110000
"""

net_and_mask = input("Введите IPv4-адрес и маску подсети: ")

net = net_and_mask.split(' ')[0].split(".")
mask = net_and_mask.split(' ')[1].split(".")

mask_bin_str = "{:08b}  {:08b}  {:08b}  {:08b}".format(int(mask[0]),
                                              int(mask[1]),
                                              int(mask[2]),
                                              int(mask[3]))

#mask_bin_str = (format(int(mask[0]), '08b') + 
#                format(int(mask[1]), '08b') + 
#                format(int(mask[2]), '08b') + 
#                format(int(mask[3]), '08b'))

mask_count = mask_bin_str.count("1")

template = """
Network:
{0:<10}{1:<10}{2:<10}{3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}

Mask:
/{8:<}
{4:<10}{5:<10}{6:<10}{7:<10}
{4:08b}  {5:08b}  {6:08b}  {7:08b}
"""
print(template.format(int(net[0]), int(net[1]), int(net[2]), int(net[3]),
                         int(mask[0]), int(mask[1]), int(mask[2]), int(mask[3]),
                         mask_count))