"""
Задание 11.2

Создать функцию prompt_user_ip которая запрашивает пользователя ввод IP-адреса,
проверяет правильность введенного адреса и, если он неправильный, запрашивает
адрес снова. Если пользователь ввел правильный IP-адрес, функция возвращает его.

У функции prompt_user_ip должны быть такие параметры:
* max_retry - максимальное количество попыток ввода IP-адреса. Значение по умолчанию 5.
* ensure_unicast - если параметру передано значение True, адрес должен быть не
  только правильным в целом, но и должен быть именно unicast адресом, то есть
  первый октет адреса должен быть в диапазоне 1-223.  Возможные значения
  True/False. Значение по умолчанию False.

Если после max_retry попыток не был введен правильный адрес, функция должна
генерировать исключение ValueError такого вида (n = max_retry):
ValueError: После n попыток не был введен правильный адрес

IP-адрес считается правильным, если он:
- состоит из 4 чисел (а не букв или других символов)
- числа разделены точкой
- каждое число в диапазоне от 0 до 255


Пример работы функции:

In [7]: prompt_user_ip(max_retry=5, ensure_unicast=False)
Введите правильный IP-адрес: 10.1.1.1.1
Неправильный IP-адрес
Введите правильный IP-адрес: 10.1.1.1
Out[7]: '10.1.1.1'

In [8]: prompt_user_ip(max_retry=5, ensure_unicast=False)
Введите правильный IP-адрес: 110.1.500.1
Неправильный IP-адрес
Введите правильный IP-адрес: 4.4.4.4
Out[8]: '4.4.4.4'

In [9]: prompt_user_ip(max_retry=3, ensure_unicast=False)
Введите правильный IP-адрес: a
Неправильный IP-адрес
Введите правильный IP-адрес: a
Неправильный IP-адрес
Введите правильный IP-адрес: a
Неправильный IP-адрес
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
...
ValueError: После 3 попыток не был введен правильный адрес

In [10]: prompt_user_ip(max_retry=5, ensure_unicast=True)
Введите правильный IP-адрес: 255.255.255.255
Введите IP-адрес в диапазоне unicast: 1-223
Введите правильный IP-адрес: 10.1.1.1
Out[10]: '10.1.1.1'

In [12]: prompt_user_ip(max_retry=3, ensure_unicast=True)
Введите правильный IP-адрес: 0.0.0.0
Введите IP-адрес в диапазоне unicast: 1-223
Введите правильный IP-адрес: 0.0.0.0
Введите IP-адрес в диапазоне unicast: 1-223
Введите правильный IP-адрес: 0.0.0.0
Введите IP-адрес в диапазоне unicast: 1-223
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
...
ValueError: После 3 попыток не был введен правильный адрес

"""

def check_ip(ip_addr):
    """
    Функция производит валидацию IPv4-адреса

    Params:
        ip_addr (str): Строка, предствляющая собой IPv4 адрес

    Returns:
        bool: Результат проверки IPv4-адреса на корректность
    """
    octets = ip_addr.split(".")

    if len(octets) != 4:
        return False
    else:
        for octet in octets:
            if not (octet.isdigit() and int(octet) in range(256)):
                return False
    return True

def prompt_user_ip(*, max_retry, ensure_unicast):
    """
    Функция запрашивает у пользователя ввод IPv4-адреса.
    Затем адрес проверяется на корректность ввода.
    В случае несоответствия адреса заданным параметрам процесс повторяется.
    При вводе корректного IPv4-адреса он выводится на экран и работа завершается.

    Params:
        max_retry (int): Максимальное количество попыток ввода
        ensure_unicast (bool): Требование соответствия unicast адресам

    Raises:
        ValueError: В случае исчерпания попыток ввода выводится сообщение об ошибке.
    """
    for attempt in range(1, max_retry+1):
        ip = input("Введите правильный IP-адрес: ")
        if not check_ip(ip):
            print("Неправильный IP-адрес")
            continue
        elif ensure_unicast == True:
            octet1, *_ = ip.split(".")
            if int(octet1) in range(1,224):
                return ip
            else:
                print("Введите IP-адрес в диапазоне unicast: 1-223")
                continue
        else:
            return ip
            
    if attempt == max_retry:
        raise ValueError(f"После {attempt} попыток не был введен правильный адрес")    
